#pragma once
#include <string>
#include <vector>
#include <memory>
#include "GaussSeq.h"
#include "Dataset.h"
#include "ARSeq.h"
#include "Seq.h"
#include "utils.h"
using utils::my_float;


/*
 *  Dataset generated by autoregressive process with exogenous variables
 */
class DatasetARX : public Dataset {
private: 
    /* 
     *  Member variables
     */
    std::string fname {"Not-Set"};                  // name of file, without ".csv"
    /*
     *  Noise type values determine the type of processes that populate 
     *  the non-salient feature index:
     *      - 0: Zero processes
     *      - 1: Gaussian white noise (zero mean, unit variance)
     *      - 2: Gaussian white nosie (variable mean and variance)
     *      - 3: Stationary AR processes
     *      - 4: Non-stationary AR processes
     */
    unsigned char noise_type {10};
    std::vector<std::unique_ptr<Seq>> feats {};         // all features
    std::vector<my_float> feat_5 {1};                   // feature 5 past vals
    std::vector<my_float> feat_10 {1, 2, 3};            // feature 10 past vals
    std::vector<my_float> feat_20 {1, 2, 3, 4, 5};      // feature 20 past vals
    static boost::random::mt19937 gen;
    /*
     *  Unlike in DatasetAR, an error term is needed since it is not integrated
     *  into the target sequence, which is a function of current values.
     */
    GaussSeq error_term {};

    /*
     *  Helper functions
     */
    void seed_features();
    void noise_one();
    void noise_two();
    void noise_three();
    void noise_four();
    
    // generate and normalize data sequences
    std::array<std::array<my_float, utils::FEAT_COUNT + 1>, utils::TIME_STEP> generate_normalized_dat();

public:
    /*
     *  Constructors and destructors
     */
    DatasetARX(std::string);
    DatasetARX(std::string, unsigned char);
    ~DatasetARX() = default;

    /*
     *  Member functions
     */
    void write_csv() override;
    void set_noise(unsigned char) override;
};
