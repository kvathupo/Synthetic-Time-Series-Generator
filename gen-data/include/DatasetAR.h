#pragma once
#include <string>
#include <vector>
#include <memory>
#include "Dataset.h"
#include "ARSeq.h"
#include "Seq.h"


/*
 *  Dataset generated by autoregressive process
 */
class DatasetAR : public Dataset {
protected:
    /*
     *  Member variables
     */
    std::string fname {"Not-Set"};                  // name of file, sans ".csv"
    /*
     *  Noise type values determine the type of processes that populate 
     *  the non-salient feature index:
     *      - 0: Zero processes
     *      - 1: Gaussian white noise (zero mean, unit variance)
     *      - 2: Gaussian white noise (variable mean and variance)
     *      - 3: Stationary AR processes
     *      - 4: Non-stationary AR processes
     */
    unsigned char noise_type {10};
    ARSeq target {};                                // salient process
    std::vector<std::unique_ptr<Seq>> feats {};     // all features
    /*
     *  The previous value of the salient process is saved such that the target
     *  value at each time-step is the future value; that is, all features are 
     *  past values, which are compared to the current target value.
     */
    my_float prev_targ_val {};
    static boost::random::mt19937 gen;

    /*
     *  Helper functions
     */
    virtual void noise_zero();
    virtual void noise_one();
    virtual void noise_two();
    virtual void noise_three();
    virtual void noise_four();
    
    /*
     *  Generates and normalizes data sequences. 
     *  Note that we use FEAT_COUNT+1 to include the target sequence
     */
    std::array<std::array<my_float, utils::FEAT_COUNT + 1>, utils::TIME_STEP> generate_normalized_dat();

public:
    /*
     *  Constructors and destructors
     */
    DatasetAR() = default;
    DatasetAR(std::string, ARSeq);
    DatasetAR(std::string, ARSeq, unsigned char);
    ~DatasetAR() = default;

    /*
     *  Member functions
     */
    void write_csv() override;
    void set_noise(unsigned char) override;
};
